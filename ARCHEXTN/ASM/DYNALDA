         TITLE 'DYNAMIC CALLS FOR PL/I PROGRAMS'
*---------------------------------------------------------------------*
*                                                                     *
* THIS ROUTINE IS DESIGNED TO PROVIDE DYNAMIC PROGRAM LOADING         *
* FOR PROGRAMS COMPILED WITH PL/I (F), WHICH ONLY SUPPORTS STATIC     *
* CALLS.                                                              *
*                                                                     *
* REVISED SEPTEMBER, 2024 - ED LISS                                   *
* THE LOADED PROGRAM'S RETURN CODE WAS NOT BEING RETURNED.            *
* ADDED CODE TO SEND THE RC BACK TO THE CALLER.                       *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
* NOTE ABOUT PARMS AND PL/I(F)                                        *
*                                                                     *
* EACH ADDRESS IN THE PARM LIST POINTS TO A DATA DESCRIPTION BLOCK    *
* (DDB).  THE FIRST WORD OF EACH DDB IS THE ADDRESS OF THE ACTUAL     *
* DATA ITEM.  THIS MODULE ASSUMES THE CALLED MODULES EXPECTS THE      *
* PARM LIST TO POINT TO THE ACTUAL DATA ITEMS.  THE PARM LIST MUST    *
* BE REFORMATTED.  IF THE MODULE YOU WANT TO CALL EXPECT THE PARM     *
* LIST TO BE PL/I FORMAT, USE DYNALDP RATHER THAN DYNADLA             *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
* EXAMPLE:   IN PL/I(F),                                              *
*      CALL PROGRAMA(PARM_1,PARM_2);                                  *
* IT IS NECESSARY TO LINK THE OBJECT MODULE FOR THE PROGRAMA          *
* ROUTINE TO EACH CALLING PL/I PROGRAM.                               *
*                                                                     *
* PROGRAMA SHOULD NOT BE A PL/I PROGRAM DUE TO COMPLEX RUNTIMES.      *
*                                                                     *
* IN PL/I(F), THERE IS NO NATIVE SUPPORT FOR DYNAMIC LOADS.  DYNALDA  *
* IMPLEMENTS THIS SCHEME FOR PL/I(F) PROGRAMMERS.                     *
*                                                                     *
*     DECLARE                                                         *
*      1  WS_PGM_BLK   UNALIGNED,                                     *
*          5  WS_PGM_NAME        CHAR(8)       INIT((8)' '),          *
*          5  WS_PGM_ADDR        FIXED BIN(31) INIT(0),               *
*          5  WS_CALL_MODE       CHAR(1)       INIT('K'),             *
*          5  WS_PGM_RC          FIXED BIN(15) INIT(0),
*          5  FILLER             CHAR(1)       INIT((1)' ');          *
*      ...                                                            *
*      ...                                                            *
*                                                                     *
*      WS_PGM_NAME = 'PROGRAMA';                                      *
*      CALL DYNALDA(WS_PGM_NAME,PARM_1,PARM_2);                       *
*                                                                     *
* THIS CALL RESULTS IN 'PROGRAMA' BEING LOADED AT RUN TIME INTO       *
* MEMORY AND THEN CALLED.   EACH TIME A MODULE IS DYNAMICALLY CALLED, *
* MVS CHECKS TO SEE IF THE LOAD MODULE IS RENTRANT OR RESUABLE.  IF   *
* SO, THE COPY OF THE PROGRAM IN MEMORY IS REUSED.  IF NOT, A NEW     *
* COPY IF THE PROGRAM IS LOADED FROM DISK AND CALLED.                 *
*                                                                     *
* EXAMPLE:                                                            *
*     DECLARE                                                         *
*      1  WS_PGM_BLK   UNALIGNED,                                     *
*          5  WS_PGM_NAME        CHAR(8)       INIT((8)' '),          *
*          5  WS_PGM_ADDR        FIXED BIN(31) INIT(0),               *
*          5  WS_CALL_MODE       CHAR(1)       INIT('K'),             *
*          5  WS_PGM_RC          FIXED BIN(15) INIT(0),               *
*          5  FILLER             CHAR(1)       INIT((1)' ');          *
*      ...                                                            *
*      ...                                                            *
*                                                                     *
*      WS_PGM_NAME = 'PROGRAMA';                                      *
*      CALL DYNALDA(WS_PGM_NAME,PARM_1,PARM_2);                       *
*                                                                     *
*  NOTES:                                                             *
*    - THE WS_PGM_ADDR FIELD MUST BE INITIALIZED TO ZERO              *
*      BEFORE THE FIRST CALL.  DO NOT CHANGE THE VALUE OF             *
*      THIS FIELD.  IF IT IS NOT ZERO, DYNALDA ASSUMES                *
*      THIS IS THE ADDRESS IN MEMORY OF PROGRAMA.                     *
*                                                                     *
*    - THE WS_CALL_MODE  MUST BE 'K' OR 'R'.                          *
*        K INDICATES KEEP THE WORKING STORAGE AND MODULE FROM         *
*          LAST CALL.  IF WS_PGM_ADDR IS NOT ZERO, THIS ADDRESS       *
*          IS CALLED.                                                 *
*                                                                     *
*        R INDICATE REFRESH MODULE FROM DISK, THUS CLEARING           *
*          WORKING STORAGE BACK TO THE INITIAL VALUES.                *
*                                                                     *
*       YOU MAY DEFINE AND USE AS MANY WS_PGM_BLK AS NEEDED.          *
*                                                                     *
* IT IS NECESSARY TO LINK THE OBJECT MODULE FOR THE DYNALDA           *
* ROUTINE TO EACH CALLING PROGRAM. IT IS ALSO NECESSARY TO LINK       *
* THE PROGRAMA AS AN EXECUTABLE MODULE.  THE BENEFIT OF THIS IS THE   *
* MODULE IS NOT STATIC LINKED INTO ALL MODULES WHICH CALL IT.         *
* IF THE ROUTINE IS CHANGED, AS LONG AS THE PARM FORMATS ARE          *
* THE SAME, THE CALLING MODULES WILL NOT NEED TO BE CHANGED.          *
*                                                                     *
* FOR EXAMPLE, A PL/I (F)   APPLICATION CONSISTS OF 100 PROGRAMS,     *
* EACH OF WHICH CALL AN IO MODULE CALLED IOMOD.  USING STATIC CALLS,  *
* A COPY OF IOMOD IS LINK EDITED INTO EACH OF THE 100 LOAD MODULES.   *
* MAKING A CHANGE TO IOMOD WOULD REQUIRE 100 LOAD MODULES TO BE       *
* RELINKED.  USING DYNALOAD, ONLY IOMOD WOULD NEED TO BE RELINKED.    *
* THE 100 CALLING MODULES WOULD ONLY NEED TO BE TESTED.               *
*                                                                     *
* THIS CODE IS PLACED IN THE PUBLIC DOMAIN AND MAY BE FREELY USED     *
* AND INCORPORATED INTO DERIVED WORKS AS LONG AS ATTRIBUTION TO THE   *
* ORIGINAL AUTHORSHIP REMAINS IN ANY DISTRIBUTED COPIES OF THE ALC    *
* SOURCE.                                                             *
*                                                                     *
* REWRITTEN OCTOBER, 2009  BY ED LISS                                 *
* HTTP://WWW.SUMMERMOON.COM/HERCULES/                                 *
*                                                                     *
* MODIFIED SEPTEMBER, 2024  BY ED LISS                                *
* FIXED TO PASS THE RETURN CODE FROM THE CALLED TO CALLING PROGRAM.   *
* RETURN CODE IS PASSED BACK IN THE PARM SINCE PL/I DOES NOT PROVIDE  *
* ACCESS TO RETURN CODES.                                             *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
*
         LCLC  &SYSECT
&SYSECT  SETC  'DYNALDA'           ROUTINE IDENTIFICATION
*
&SYSECT  CSECT
*
@IDENT01 B     @IDENT04(R15)       BRANCH AROUND IDENT CONSTANTS
         DC    AL1(@IDENT03-@IDENT02)
@IDENT02 DC    C'&SYSECT V1'
         DC    C'&SYSDATE &SYSTIME - '
         DC    C'DYNAMIC LOAD ROUTINE FOR MVT COBOL'
@IDENT03 DS    0H
@IDENT04 EQU   *-@IDENT01
*
         SAVE  (14,12)
*
         BALR  R12,0               BASE REGISTERS ARE 12
         USING *,R12
*
         LR    R5,R13              COPY CALLER'S SAVEAREA ADDR
         LA    R13,SAVEAREA        ESTABLISH MY SAVEAREA
         ST    R5,4(,R13)          BACK CHAIN SAVE AREAS
         ST    R13,8(,R5)          FORWARD CHAIN SAVE AREAS
*
*---------------------------------------------------------------------*
* AT LEAST ONE PARM MUST BE PASSED.  THIS IS THE NAME OF THE LOAD     *
* MODULE TO DYNAMICALY CALL.  IF THIS IS MISSING, THE MODULE WILL     *
* ABORT WITH A U0001 ABEND CODE.                                      *
*---------------------------------------------------------------------*
* EACH ADDRESS IN THE PARM LIST POINTS TO A DATA DESCRIPTION BLOCK    *
* (DDB).  THE FIRST WORD OF EACH DDB IS THE ADDRESS OF THE ACTUAL     *
* DATA ITEM.  THE PARM LIST POINTED TO BY REG 1 MUST BE REBUILT TO    *
* BE ABLE TO PASS THE DATA TO WS_PGM_NAME.                            *
*---------------------------------------------------------------------*
* THIS MODULE WILL STRIP OFF THE PROGRAM NAME AND PASS THE REMAINING  *
* PARMS, IF ANY, TO THE SUBROUTINE BEING CALLED.                      *
* IF THERE ARE NO PARMS TO PASS, R1 IS SET TO ZEROS.                  *
*---------------------------------------------------------------------*
         LTR   R1,R1
         BNZ   PARMFND             BRANCH IF PARM LIST PRESENT
         ABEND 1,,,USER
PARMFND  DS    0H
         LR    R2,R1               COPY PARMLIST ADDR TO R2
         LA    R3,128              GET MAX PARMS
         LA    R4,NEWPARM          GET ADDRESS OF NEW PARM
COPYPARM EQU   *
         L     R5,0(0,R2)          GET ADDR OF DDB
         L     R5,0(0,R5)          GET ADDR OF DATA
         ST    R5,0(0,R4)          ADD TO NEWPARM
         NI    0(R4),X'7F'         FORCE HIGH ORDER BIT OFF
         TM    0(R2),X'80'         END OF PARM LIST?
         BO    PARMDONE            YES, BRANCH
         LA    R2,4(0,R2)
         LA    R4,4(0,R4)
         BCT   R3,COPYPARM
         ABEND 3,,,USER            ABORT IF TOO MANY PARMS
PARMDONE EQU   *
         OI    0(R4),X'80'         FLAG END OF LIST
***
         LA    R2,NEWPARM          GET ADDRESS OF NEWPARM INTO R2
         L     R3,0(,R2)           GET ADDR OF PROGRAM NAME
         MVC   PGMBLK,0(R3)        GET PGMBLK - NAME, ADDR, FUNC, RC
         MVC   PGMRC,=H'0'         SET RC TO ZERO
         TM    0(R2),X'80'         CHECK FOR LAST PARM
         BZ    OPTPARMS            MORE PARMS FOUND
         SR    R4,R4               SET PARM ADDR TO ZERO
         B     DYNACALL
OPTPARMS DS    0H
         LA    R4,4(,R2)           ADVANCE TO NEXT PARM
DYNACALL DS    0H
         L     R0,PGMADDR          GET ADDR IN MEMORY
         CLC   PGMADDR,=4X'00'     IS IS ZEROS
         BE    DOLOAD
         CLI   PGMFUNC,C'K'        KEEP CALL?
         BE    SKIPLOAD
         CLI   PGMFUNC,C'R'
         BE    DOLOAD
         ABEND 2,,,USER            ABORT IF NO CORRECT PARM
*
DOLOAD   DS    0H
         LOAD  EPLOC=PGM
         ST    R0,PGMADDR
SKIPLOAD DS    0H
         LR    R1,R4               PUT PARMLIST IN R1
         LR    R15,R0              COPY MODULE ADDR TO R15
         BALR  R14,R15             CALL LOADED PGM
         ST    R15,RCHOLD          SAVE THE RETURN CODE
         MVC   PGMRC,RCHOLD+2      RC IS A HALF WORD
         MVC   0(L'PGMBLK,R3),PGMBLK PUT CTL BLK BACK IN CALLERS WS
GOBACK   DS    0H
*---------------------------------------------------------------------*
* RETURN TO CALLING PROGRAM WITH ZERO RETURN CODE IN R15              *
*---------------------------------------------------------------------*
         L     R13,4(,R13)    RESET TO CALLERS SAVE AREA
         RETURN (14,12),RC=0
*
         DS    0F
PGMBLK   DS    0CL16
PGM      DC    CL8' '
PGMADDR  DC    F'0'
PGMFUNC  DC    C' '
PGMRC    DC    XL2'0000'
         DS    CL1
RCHOLD   DS    F
NEWPARM  DC    128F'0'
*
*---------------------------------------------------------------------*
* MY REGISTER SAVE AREA                                               *
*---------------------------------------------------------------------*
SAVEAREA DS    18F
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         END
